name: deployment-pipeline
run-name: Pipeline | ${{ github.event.head_commit.message }} | By @${{ github.actor }}
on:
  push:
    branches:
      - master

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_STATE_BUCKET: ${{ vars.TERRAFORM_STATE_BUCKET }}
  AWS_STS_EXTERNAL_KEY: ${{ secrets.AWS_STS_EXTERNAL_KEY }}
  AWS_TERRAFORM_ROLE_ARN: ${{ vars.AWS_TERRAFORM_ROLE_ARN }}

jobs:

  run-test-discord-interaction:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install test dependencies
        run: |
          python -m pip install -r requirements-dev.txt
          python -m pip install -e ./bot/commons
          python -m pip install -e ./bot/discord_interaction_lambda_function
      - name: Run request verification tests
        run: python -m unittest bot/discord_interaction_lambda_function/test/test_verify.py
      - name: Run Discord interaction lambda tests
        run: python -m unittest bot/discord_interaction_lambda_function/test/test_discord_interaction_lambda.py

  run-tests-commons:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install test dependencies
        run: |
          python -m pip install -r requirements-dev.txt
          python -m pip install -e ./bot/commons
          python -m pip install -e ./bot/discord_interaction_lambda_function
      - name: Run user DynamoDB table tests
        run: python -m unittest bot/commons/test/test_gw2_user_repo.py
      - name: Run guild DynamoDB table tests
        run: python -m unittest bot/commons/test/test_gw2_guild_repo.py

  package-common-layer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Package common layer
        run: |
          python -m pip install -r requirements.txt --target python
          echo "Installed all dependencies in 'python' directory"
          mkdir python/bot
          cp -r bot/commons python/bot/commons
          zip -r common_layer.zip python
          echo "Zipped common layer into archive 'common_layer.zip'"
          stat common_layer.zip
      - uses: actions/upload-artifact@v3
        with:
          name: common-layer-deployment-package
          path: common_layer.zip
    needs: [run-test-discord-interaction, run-tests-commons]

  package-discord-interaction-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package discord interaction lambda
        run: zip -r discord_interaction_lambda.zip bot/discord_interaction_lambda_function/* -x bot/discord_interaction_lambda_function/test*
      - uses: actions/upload-artifact@v3
        with:
          name: discord-interaction-lambda-package
          path: discord_interaction_lambda.zip
    needs: [run-test-discord-interaction, run-tests-commons]

  package-help-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package help command lambda
        run: zip -r help_lambda.zip bot/help_command/* -x bot/help_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: help-lambda-package
          path: help_lambda.zip
    needs: [run-test-discord-interaction, run-tests-commons]

  package-api-key-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package api key add lambda
        run: zip -r api_key_lambda.zip bot/api_key_command/* -x bot/api_key_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: api-key-lambda-package
          path: api_key_lambda.zip
    needs: [run-test-discord-interaction, run-tests-commons]

  package-home-world-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package home world lambda
        run: zip -r home_world_lambda.zip bot/home_world_command/* -x bot/home_world_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: home-world-lambda-package
          path: home_world_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  package-manager-role-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package manager role lambda
        run: zip -r manager_role_lambda.zip bot/manager_role_command/* -x bot/manager_role_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: manager-role-lambda-package
          path: manager_role_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  package-wvw-role-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package wvw role lambda
        run: zip -r wvw_role_lambda.zip bot/wvw_role_command/* -x bot/wvw_role_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: wvw-role-lambda-package
          path: wvw_role_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  package-wvw-rank-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package wvw rank lambda
        run: zip -r wvw_rank_lambda.zip bot/wvw_rank_command/* -x bot/wvw_rank_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: wvw-rank-lambda-package
          path: wvw_rank_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  package-wvw-matchup-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package wvw matchup lambda
        run: zip -r wvw_matchup_lambda.zip bot/wvw_matchup_command/* -x bot/wvw_matchup_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: wvw-matchup-lambda-package
          path: wvw_matchup_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  package-next-wvw-matchup-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package next wvw matchup lambda
        run: zip -r next_wvw_matchup_lambda.zip bot/next_wvw_matchup_command/* -x bot/next_wvw_matchup_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: next-wvw-matchup-lambda-package
          path: next_wvw_matchup_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  package-announcement-channel-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package next announcement channel lambda
        run: zip -r announcement_channel_lambda.zip bot/announcement_channel_command/* -x bot/announcement_channel_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: announcement-channel-lambda-package
          path: announcement_channel_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  package-wvw-raid-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package wvw raid lambda
        run: zip -r wvw_raid_lambda.zip bot/wvw_raid_command/* -x bot/wvw_raid_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: wvw-raid-lambda-package
          path: wvw_raid_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  package-wvw-daily-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Package wvw daily lambda
        run: zip -r wvw_daily_lambda.zip bot/wvw_daily_command/* -x bot/wvw_daily_command/test/*
      - uses: actions/upload-artifact@v3
        with:
          name: wvw-daily-lambda-package
          path: wvw_daily_lambda.zip
    needs: [ run-test-discord-interaction, run-tests-commons ]

  terraform-validate:
    environment: staging # does not matter technically
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      TERRAFORM_STATE_FILE: ${{ vars.TERRAFORM_STATE_FILE }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Validate Terraform configuration
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform validate
    needs: [
      package-common-layer, package-discord-interaction-lambda, package-help-lambda,
      package-api-key-lambda, package-manager-role-lambda, package-wvw-role-lambda,
      package-wvw-rank-lambda, package-wvw-matchup-lambda, package-next-wvw-matchup-lambda,
      package-announcement-channel-lambda, package-home-world-lambda, package-wvw-raid-lambda,
      package-wvw-daily-lambda]

  terraform-plan-stg:
    environment: staging
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      TERRAFORM_STATE_FILE: ${{ vars.TERRAFORM_STATE_FILE }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      DISCORD_APP_NAME: ${{ vars.DISCORD_APPLICATION_NAME }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v3
      - name: Plan actions by Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform plan -out=app.tfplan -var-file=inputs.tfvars \
            -var aws_region="$AWS_REGION" \
            -var environment="$ENVIRONMENT" \
            -var discord_bot_token="$DISCORD_BOT_TOKEN" \
            -var aws_key_id="$AWS_ACCESS_KEY_ID" \
            -var aws_secret_key="$AWS_SECRET_ACCESS_KEY" \
            -var aws_terraform_role_arn="$AWS_TERRAFORM_ROLE_ARN" \
            -var aws_assume_role_external_id="$AWS_STS_EXTERNAL_KEY" \
            -var discord_application_id="$APPLICATION_ID" \
            -var discord_application_public_key="$APPLICATION_PUBLIC_KEY" \
            -var discord_application_name="$DISCORD_APP_NAME"
          cd ..
      - uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-stg
          path: terraform/app.tfplan
    needs: [terraform-validate]

  terraform-apply-stg:
    runs-on: ubuntu-latest
    environment: staging
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      TERRAFORM_STATE_FILE: ${{ vars.TERRAFORM_STATE_FILE }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      DISCORD_APP_NAME: ${{ vars.DISCORD_APPLICATION_NAME }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v3
      - name: Apply Terraform plan
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform apply -auto-approve "./../terraform-plan-stg/app.tfplan"
    needs: terraform-plan-stg

  terraform-destroy-stg:
    runs-on: ubuntu-latest
    environment: staging_destroy
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      TERRAFORM_STATE_FILE: ${{ vars.TERRAFORM_STATE_FILE }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      DISCORD_APP_NAME: ${{ vars.DISCORD_APPLICATION_NAME }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v3
      - name: Destroy infrastructure with Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform destroy -var-file=inputs.tfvars \
            -var aws_region="$AWS_REGION" \
            -var environment="$ENVIRONMENT" \
            -var discord_bot_token="$DISCORD_BOT_TOKEN" \
            -var aws_key_id="$AWS_ACCESS_KEY_ID" \
            -var aws_secret_key="$AWS_SECRET_ACCESS_KEY" \
            -var aws_terraform_role_arn="$AWS_TERRAFORM_ROLE_ARN" \
            -var aws_assume_role_external_id="$AWS_STS_EXTERNAL_KEY" \
            -var discord_application_id="$APPLICATION_ID" \
            -var discord_application_public_key="$APPLICATION_PUBLIC_KEY" \
            -var discord_application_name="$DISCORD_APP_NAME"
    needs: terraform-plan-stg

  register-commands-test-guild:
    environment: staging
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
      GUILD_ID: ${{ vars.DISCORD_TEST_GUILD_ID }}
      COMMAND_TYPE: GUILD
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install script dependencies
        run: python -m pip install -r requirements.txt
      - name: Register commands to test guilds
        run: python commands/register_slash_commands.py
    needs: terraform-apply-stg

  terraform-plan-prd:
    environment: production
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      TERRAFORM_STATE_FILE: ${{ vars.TERRAFORM_STATE_FILE }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      DISCORD_APP_NAME: ${{ vars.DISCORD_APPLICATION_NAME }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v3
      - name: Plan actions by Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform plan -out=app.tfplan -var-file=inputs.tfvars \
            -var aws_region="$AWS_REGION" \
            -var environment="$ENVIRONMENT" \
            -var discord_bot_token="$DISCORD_BOT_TOKEN" \
            -var aws_key_id="$AWS_ACCESS_KEY_ID" \
            -var aws_secret_key="$AWS_SECRET_ACCESS_KEY" \
            -var aws_terraform_role_arn="$AWS_TERRAFORM_ROLE_ARN" \
            -var aws_assume_role_external_id="$AWS_STS_EXTERNAL_KEY" \
            -var discord_application_id="$APPLICATION_ID" \
            -var discord_application_public_key="$APPLICATION_PUBLIC_KEY" \
            -var discord_application_name="$DISCORD_APP_NAME"
          cd ..
      - uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-prd
          path: terraform/app.tfplan
    needs: [ register-commands-test-guild ]

  terraform-apply-prd:
    runs-on: ubuntu-latest
    environment: production
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      TERRAFORM_STATE_FILE: ${{ vars.TERRAFORM_STATE_FILE }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      DISCORD_APP_NAME: ${{ vars.DISCORD_APPLICATION_NAME }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v3
      - name: Apply Terraform plan
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform apply -auto-approve "./../terraform-plan-prd/app.tfplan"
    needs: terraform-plan-prd

  terraform-destroy-prd:
    runs-on: ubuntu-latest
    environment: production-destroy
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      TERRAFORM_STATE_FILE: ${{ vars.TERRAFORM_STATE_FILE }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      DISCORD_APP_NAME: ${{ vars.DISCORD_APPLICATION_NAME }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - uses: actions/download-artifact@v3
      - name: Destroy infrastructure with Terraform
        run: |
          cd terraform
          terraform init -backend-config="bucket=$TERRAFORM_STATE_BUCKET" -backend-config="key=$TERRAFORM_STATE_FILE" -backend-config="region=$AWS_REGION"
          terraform destroy -var-file=inputs.tfvars \
            -var aws_region="$AWS_REGION" \
            -var environment="$ENVIRONMENT" \
            -var discord_bot_token="$DISCORD_BOT_TOKEN" \
            -var aws_key_id="$AWS_ACCESS_KEY_ID" \
            -var aws_secret_key="$AWS_SECRET_ACCESS_KEY" \
            -var aws_terraform_role_arn="$AWS_TERRAFORM_ROLE_ARN" \
            -var aws_assume_role_external_id="$AWS_STS_EXTERNAL_KEY" \
            -var discord_application_id="$APPLICATION_ID" \
            -var discord_application_public_key="$APPLICATION_PUBLIC_KEY" \
            -var discord_application_name="$DISCORD_APP_NAME"
    needs: terraform-plan-prd

  register-commands-global:
    runs-on: ubuntu-latest
    environment: production
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT_NAME }}
      DISCORD_BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      APPLICATION_ID: ${{ vars.APPLICATION_ID }}
      APPLICATION_PUBLIC_KEY: ${{ vars.APPLICATION_PUBLIC_KEY }}
      COMMAND_TYPE: GLOBAL
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install script dependencies
        run: python -m pip install -r requirements.txt
      - name: Register commands globally
        run: python commands/register_slash_commands.py
    needs: terraform-apply-prd

